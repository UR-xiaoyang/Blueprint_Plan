name: Release

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and cache npm dependencies
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache electron-builder dependencies (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\electron-builder\Cache
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: Cache electron-builder dependencies (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/electron-builder
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: Cache electron-builder dependencies (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-
            
      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run dist
        env:
          ELECTRON_BUILDER_7Z_ALLOW_UNSAFE_SYMLINKS: "true"
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: release/ 

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install gh CLI
        run: sudo apt-get install gh

      - name: Get version
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Delete existing release if it exists
        run: |
          gh release delete v${{ steps.get_version.outputs.VERSION }} --yes || true
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Delete existing git tag if it exists
        run: |
          git tag -d v${{ steps.get_version.outputs.VERSION }} || true
          git push origin --delete v${{ steps.get_version.outputs.VERSION }} || true

      - name: Create Release
        run: |
          gh release create v${{ steps.get_version.outputs.VERSION }} --title "Release v${{ steps.get_version.outputs.VERSION }}" --notes "Automated release" --draft
          
          find artifacts -type f \( \
            -name "*.exe" -o \
            -name "*.dmg" -o \
            -name "*.pkg" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.AppImage" -o \
            -name "*.tar.gz" -o \
            -name "*.zip" -o \
            -name "*.blockmap" \
          \) -exec gh release upload v${{ steps.get_version.outputs.VERSION }} {} +
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} 